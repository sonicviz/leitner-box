#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Leitner
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Leitner")]
	public partial class LeitnerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbl_User(Tbl_User instance);
    partial void UpdateTbl_User(Tbl_User instance);
    partial void DeleteTbl_User(Tbl_User instance);
    partial void InsertTbl_Word(Tbl_Word instance);
    partial void UpdateTbl_Word(Tbl_Word instance);
    partial void DeleteTbl_Word(Tbl_Word instance);
    #endregion
		
		public LeitnerDataContext() : 
				base(global::Leitner.Properties.Settings.Default.LeitnerConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LeitnerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeitnerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeitnerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeitnerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tbl_User> Tbl_Users
		{
			get
			{
				return this.GetTable<Tbl_User>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Word> Tbl_Words
		{
			get
			{
				return this.GetTable<Tbl_Word>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_User")]
	public partial class Tbl_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User_Name;
		
		private string _User_Password;
		
		private string _Last_Visit;
		
		private EntitySet<Tbl_Word> _Tbl_Words;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    partial void OnLast_VisitChanging(string value);
    partial void OnLast_VisitChanged();
    #endregion
		
		public Tbl_User()
		{
			this._Tbl_Words = new EntitySet<Tbl_Word>(new Action<Tbl_Word>(this.attach_Tbl_Words), new Action<Tbl_Word>(this.detach_Tbl_Words));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="NChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Visit", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Last_Visit
		{
			get
			{
				return this._Last_Visit;
			}
			set
			{
				if ((this._Last_Visit != value))
				{
					this.OnLast_VisitChanging(value);
					this.SendPropertyChanging();
					this._Last_Visit = value;
					this.SendPropertyChanged("Last_Visit");
					this.OnLast_VisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_User_Tbl_Word", Storage="_Tbl_Words", ThisKey="User_Name", OtherKey="User_Name")]
		public EntitySet<Tbl_Word> Tbl_Words
		{
			get
			{
				return this._Tbl_Words;
			}
			set
			{
				this._Tbl_Words.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Words(Tbl_Word entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_User = this;
		}
		
		private void detach_Tbl_Words(Tbl_Word entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tbl_Word")]
	public partial class Tbl_Word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _English_Word;
		
		private string _Persian_Word;
		
		private string _User_Name;
		
		private string _Word_Situation;
		
		private System.Nullable<System.DateTime> _Insert_Date;
		
		private EntityRef<Tbl_User> _Tbl_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnglish_WordChanging(string value);
    partial void OnEnglish_WordChanged();
    partial void OnPersian_WordChanging(string value);
    partial void OnPersian_WordChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnWord_SituationChanging(string value);
    partial void OnWord_SituationChanged();
    partial void OnInsert_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnInsert_DateChanged();
    #endregion
		
		public Tbl_Word()
		{
			this._Tbl_User = default(EntityRef<Tbl_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_English_Word", DbType="NChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string English_Word
		{
			get
			{
				return this._English_Word;
			}
			set
			{
				if ((this._English_Word != value))
				{
					this.OnEnglish_WordChanging(value);
					this.SendPropertyChanging();
					this._English_Word = value;
					this.SendPropertyChanged("English_Word");
					this.OnEnglish_WordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Persian_Word", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Persian_Word
		{
			get
			{
				return this._Persian_Word;
			}
			set
			{
				if ((this._Persian_Word != value))
				{
					this.OnPersian_WordChanging(value);
					this.SendPropertyChanging();
					this._Persian_Word = value;
					this.SendPropertyChanged("Persian_Word");
					this.OnPersian_WordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="NChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					if (this._Tbl_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_Situation", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Word_Situation
		{
			get
			{
				return this._Word_Situation;
			}
			set
			{
				if ((this._Word_Situation != value))
				{
					this.OnWord_SituationChanging(value);
					this.SendPropertyChanging();
					this._Word_Situation = value;
					this.SendPropertyChanged("Word_Situation");
					this.OnWord_SituationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Insert_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Insert_Date
		{
			get
			{
				return this._Insert_Date;
			}
			set
			{
				if ((this._Insert_Date != value))
				{
					this.OnInsert_DateChanging(value);
					this.SendPropertyChanging();
					this._Insert_Date = value;
					this.SendPropertyChanged("Insert_Date");
					this.OnInsert_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tbl_User_Tbl_Word", Storage="_Tbl_User", ThisKey="User_Name", OtherKey="User_Name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tbl_User Tbl_User
		{
			get
			{
				return this._Tbl_User.Entity;
			}
			set
			{
				Tbl_User previousValue = this._Tbl_User.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_User.Entity = null;
						previousValue.Tbl_Words.Remove(this);
					}
					this._Tbl_User.Entity = value;
					if ((value != null))
					{
						value.Tbl_Words.Add(this);
						this._User_Name = value.User_Name;
					}
					else
					{
						this._User_Name = default(string);
					}
					this.SendPropertyChanged("Tbl_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
